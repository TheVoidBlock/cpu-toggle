#!/bin/bash

readonly github_url="https://github.com/thevoidblock/cputoggle"
readonly project_name="CPU Toggle"
readonly project_alias="cpu-toggle"
readonly project_version="1.0.0-Alpha.1"

readonly interface_default_width=15

cursor=0

throwError() {
	echo -e "Error: $1"
	exit 1
}

repeat() {
	for i in $(seq "$2"); do
		echo -n "$1"
	done
}

getHorizontalMargin() {
	if [[ ! $list_mode == true ]]; then
		repeat " " $(($(tput cols)/2-interface_width/2))
	fi
}

getVerticalMargin() {
	if [[ ! $list_mode == true ]]; then
		echo -e "$(repeat "\n" $(($(tput lines)/2-interface_height/2)))"
	fi
}

render() {
	clear
	getVerticalMargin
	echo "$(getHorizontalMargin)┏$(repeat '━' $((interface_width-2)))┓"

	i=0
	for cpu in "${settable_cpus[@]}"; do
		if [ "$(cat ./"$cpu"/online)" == 1 ]; then
			cpu_state_text='enabled'
			line_right_padding=' '
			color="\e[32m"
		else
			cpu_state_text='disabled'
			line_right_padding=''
			color="\e[31m"
		fi

		if [[ $cursor == "$i" ]]; then
			color+="\e[107m"
		fi

		echo -e "$(getHorizontalMargin)┃ $color$cpu - $cpu_state_text$line_right_padding\e[0m ┃"

		i=$((i+1))
	done
	echo "$(getHorizontalMargin)┗$(repeat '━' $((interface_width-2)))┛"
}

redraw() {
  # we are echoing render instead of just using render because we want to wait for the full output before rendering
	# shellcheck disable=SC2005
	echo "$(render)"
}

toggleCPU() {
	if [[ $(cat ./"$1"/online) == 1 ]]; then
		echo 0 > ./"$1"/online
	else
		echo 1 > ./"$1"/online
	fi
}

if [[ $1 == "list" && -z $2 ]]; then
	list_mode=true
	cursor=-1

elif [[ $1 == "help" ]]; then
	echo -e "usage: $project_alias [options]\n\t$project_name $project_version - TUI tool for turning on/off cpu cores. You must run this tool as root.\n\n\tKeybinds:\n\t\tq - quit\n\t\tup/down - move cursor\n\t\tleft/right - toggle cpu\n\n\tOptions:\n\t\tlist - lists active/inactive CPU cores (no root)"
	exit 0

elif [[ -n $1 ]]; then
		throwError "Unkown command. Type $project_alias help for options."

elif [[ $(id -u) -ne 0 ]]; then
	 throwError "You cannot run $project_name unless you are root."

fi

cd /sys/devices/system/cpu/ || throwError "Couldn't enter directory /sys/devices/system/cpu/. Please report this to the github $github_url"

# none of the strings could have whitespace in them, so splitting isn't a possibility
# shellcheck disable=SC2207
cpus=( $(find ./ -maxdepth 1 | grep -Eo "cpu[0-9]+") )
settable_cpus=()
max_cpu_name_width=0
for cpu in "${cpus[@]}"; do
	if [[ -f ./$cpu/online ]]; then
		settable_cpus+=("$cpu")
		if [[ ${#cpu} -gt $max_cpu_name_width ]]; then
			max_cpu_name_width=${#cpu}
		fi
	fi
done

# we only need to check the first element because if that is empty the whole array is empty.
# shellcheck disable=SC2128
if [[ -z $settable_cpus ]]; then
	throwError "None of your CPU cores can be set. If you believe this is an error, please report this to the github $github_url"
fi

# we only need to check the first element because if that is empty the whole array is empty.
# shellcheck disable=SC2207
settable_cpus=($(echo "${settable_cpus[@]}" | xargs -n1 | sort | xargs))

interface_width=$((max_cpu_name_width+interface_default_width))
interface_height=$((${#settable_cpus[@]}+2))

redraw

if [[ $list_mode == true ]]; then
	exit 0
fi

while :
do
	read -t 0.016 -rsd $'\0' key
	case "$key" in
		$'\e[A')
			if [[ $cursor -gt 0 ]]; then
				cursor=$((cursor-1))
				redraw
			fi
		;;
		$'\e[B')
			if [[ $cursor -lt $((${#settable_cpus[@]}-1)) ]]; then
				cursor=$((cursor+1))
				redraw
			fi
		;;
		[1-${#settable_cpus[@]}])
			cursor=$((key-1))
			redraw
		;;
		"q") list_mode=true; redraw; exit 0 ;;
		$'\e[C'|$'\e[D') toggleCPU "${settable_cpus[$cursor]}"; redraw ;;
   esac
done

exit 0
